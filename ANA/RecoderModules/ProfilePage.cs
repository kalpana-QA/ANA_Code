///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace ANA.RecoderModules
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The ProfilePage recording.
    /// </summary>
    [TestModule("a76c173e-dec8-4a2f-a1da-3288bf3c8daf", ModuleType.Recording, 1)]
    public partial class ProfilePage : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::ANA.ANARepository repository.
        /// </summary>
        public static global::ANA.ANARepository repo = global::ANA.ANARepository.Instance;

        static ProfilePage instance = new ProfilePage();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public ProfilePage()
        {
            firstname = "Shubham";
            lastname = "verma";
            addressfield1 = "108 West College Street, Suite 108";
            city = "Columbiana";
            zipcode = "35051";
            phone1 = "205";
            phone2 = "669";
            phone3 = "3847";
            NewPassword = "Test123";
            ConfirmPassword = "Test123";
            Dropdown_Value = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static ProfilePage Instance
        {
            get { return instance; }
        }

#region Variables

        string _firstname;

        /// <summary>
        /// Gets or sets the value of variable firstname.
        /// </summary>
        [TestVariable("cb7e2db2-72d1-471f-9845-65f19a4002c3")]
        public string firstname
        {
            get { return _firstname; }
            set { _firstname = value; }
        }

        string _lastname;

        /// <summary>
        /// Gets or sets the value of variable lastname.
        /// </summary>
        [TestVariable("fdc345f4-8570-4e21-827b-858b874e6665")]
        public string lastname
        {
            get { return _lastname; }
            set { _lastname = value; }
        }

        string _addressfield1;

        /// <summary>
        /// Gets or sets the value of variable addressfield1.
        /// </summary>
        [TestVariable("56c7853d-6bff-4272-b726-a2248d42429a")]
        public string addressfield1
        {
            get { return _addressfield1; }
            set { _addressfield1 = value; }
        }

        string _city;

        /// <summary>
        /// Gets or sets the value of variable city.
        /// </summary>
        [TestVariable("4df2900d-a949-4a01-909e-8a931573029a")]
        public string city
        {
            get { return _city; }
            set { _city = value; }
        }

        string _zipcode;

        /// <summary>
        /// Gets or sets the value of variable zipcode.
        /// </summary>
        [TestVariable("e9f1bc58-6b54-4c65-ad77-c8d9bdc1aa0a")]
        public string zipcode
        {
            get { return _zipcode; }
            set { _zipcode = value; }
        }

        string _phone1;

        /// <summary>
        /// Gets or sets the value of variable phone1.
        /// </summary>
        [TestVariable("9d5a0d12-a6c6-4bff-a132-3bae8f8561ba")]
        public string phone1
        {
            get { return _phone1; }
            set { _phone1 = value; }
        }

        string _phone2;

        /// <summary>
        /// Gets or sets the value of variable phone2.
        /// </summary>
        [TestVariable("b8eacd5b-6014-4f82-b582-6ce8e5ff3b5b")]
        public string phone2
        {
            get { return _phone2; }
            set { _phone2 = value; }
        }

        string _phone3;

        /// <summary>
        /// Gets or sets the value of variable phone3.
        /// </summary>
        [TestVariable("1d7aa228-173b-4e1b-9a97-29c6eff7b47a")]
        public string phone3
        {
            get { return _phone3; }
            set { _phone3 = value; }
        }

        string _NewPassword;

        /// <summary>
        /// Gets or sets the value of variable NewPassword.
        /// </summary>
        [TestVariable("446ef388-bd49-4684-8b45-bb15ea38b5c9")]
        public string NewPassword
        {
            get { return _NewPassword; }
            set { _NewPassword = value; }
        }

        string _ConfirmPassword;

        /// <summary>
        /// Gets or sets the value of variable ConfirmPassword.
        /// </summary>
        [TestVariable("52a83401-e95c-4c97-a149-17deea89ec94")]
        public string ConfirmPassword
        {
            get { return _ConfirmPassword; }
            set { _ConfirmPassword = value; }
        }

        string _Dropdown_Value;

        /// <summary>
        /// Gets or sets the value of variable Dropdown_Value.
        /// </summary>
        [TestVariable("136ec9a1-623e-45d4-ad4c-28fab8177072")]
        public string Dropdown_Value
        {
            get { return _Dropdown_Value; }
            set { _Dropdown_Value = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$firstname' with focus on 'Firstname'.", repo.FirstnameInfo, new RecordItemIndex(0));
            repo.Firstname.PressKeys(firstname);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$lastname' with focus on 'Lastname'.", repo.LastnameInfo, new RecordItemIndex(1));
            repo.Lastname.PressKeys(lastname);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$addressfield1' with focus on 'AddressField1'.", repo.AddressField1Info, new RecordItemIndex(2));
            repo.AddressField1.PressKeys(addressfield1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$city' with focus on 'CITY'.", repo.CITYInfo, new RecordItemIndex(3));
            repo.CITY.PressKeys(city);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Profile.STATE' at Center.", repo.Profile.STATEInfo, new RecordItemIndex(4));
            repo.Profile.STATE.Click();
            Delay.Milliseconds(0);
            
            selectStateFromDrpdown();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$zipcode' with focus on 'Zipcode'.", repo.ZipcodeInfo, new RecordItemIndex(6));
            repo.Zipcode.PressKeys(zipcode);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$phone1' with focus on 'phone1'.", repo.phone1Info, new RecordItemIndex(7));
            repo.phone1.PressKeys(phone1);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$phone2' with focus on 'Phone2'.", repo.Phone2Info, new RecordItemIndex(8));
            repo.Phone2.PressKeys(phone2);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$NewPassword' with focus on 'NewPassword'.", repo.NewPasswordInfo, new RecordItemIndex(9));
            repo.NewPassword.PressKeys(NewPassword);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'PositionDescription' at Center.", repo.PositionDescriptionInfo, new RecordItemIndex(10));
            repo.PositionDescription.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 10s to exist. Associated repository item: 'ADVANCEDPRACTICE'", repo.ADVANCEDPRACTICEInfo, new ActionTimeout(10000), new RecordItemIndex(11));
            repo.ADVANCEDPRACTICEInfo.WaitForExists(10000);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'ADVANCEDPRACTICE'.", repo.ADVANCEDPRACTICEInfo, new RecordItemIndex(12));
            repo.ADVANCEDPRACTICE.Focus();
            Delay.Milliseconds(0);
            
            selectOptionFromDrpdown(Dropdown_Value);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$ConfirmPassword' with focus on 'ConfirmPassword'.", repo.ConfirmPasswordInfo, new RecordItemIndex(14));
            repo.ConfirmPassword.PressKeys(ConfirmPassword);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Userregnext' at Center.", repo.UserregnextInfo, new RecordItemIndex(15));
            repo.Userregnext.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'Profile.DdlEmpStatus' at Center.", repo.Profile.DdlEmpStatusInfo, new RecordItemIndex(16));
            repo.Profile.DdlEmpStatus.Click();
            Delay.Milliseconds(0);
            
            selectDdlEmpStatus();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
